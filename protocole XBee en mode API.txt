#pragma once
#include <iostream>
#include <vector>
#include <random>
#include <sstream>
#include <string>
#include <bitset>
#include <iomanip>
void explication();
void calcule(uint8_t value, std::vector<std::string>& calculesTrame);
std::vector<uint8_t> escapeFrame(const std::vector<uint8_t>& frame, std::vector<std::string>& trameAnalyse, std::vector<std::string>& calculesTrame);
std::vector<unsigned char> generateRandomFrame(size_t length);
void tuto();

std::vector<uint8_t> escapeFrame(const std::vector<uint8_t>& frame, std::vector<std::string>& trameAnalyse, std::vector<std::string>& calculesTrame) {
    std::vector<uint8_t> escapedFrame;
    bool First = true;
    for (uint8_t byte : frame) {
        if (!First) {
            if (byte == 0x7E || byte == 0x7D || byte == 0x11 || byte == 0x13) {
                escapedFrame.push_back(0x7D);
                escapedFrame.push_back(byte ^ 0x20);
                std::stringstream ss;
                ss <<"\n\033[31m" << "0x" << std::hex << static_cast<int>(byte) << "\033[0m" << " ^ 0x20" << " = " << "\033[32m" << (byte ^ 0x20) << "\033[90m : (0x" << static_cast<int>(byte) << ") remplace par : 0x7d 0x" << (byte ^ 0x20) << "\033[0m";
                trameAnalyse.push_back(ss.str());
                calcule(byte, calculesTrame);
            }
            else {
                escapedFrame.push_back(byte);
            }
        }
        if (First) escapedFrame.push_back(0x7E);
        First = false;
    }

    return escapedFrame;
}

void calcule(uint8_t value, std::vector<std::string>& calculesTrame) {
    std::bitset<8> byte(value);
    std::bitset<8> twenty(0x20);
    std::bitset<8> result(value ^ 0x20);

    std::string resultString = "\n\n\t\t " + byte.to_string() +"\n";
    resultString += "\t\t " + twenty.to_string() + "\n";
    resultString += "\t\t^--------\n";
    resultString += "\t\t " + result.to_string() + "\n\n\n";
    
    calculesTrame.push_back(resultString);

}

uint8_t calculateChecksum(const std::vector<uint8_t>& frame, int sum) {

    return 0xFF - (sum % 256);
}


std::vector<unsigned char> generateRandomFrame(size_t length) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<unsigned int> dis(0x00, 0xFF);

    std::vector<unsigned char> randomFrame(length);
    for (size_t i = 0; i < length; ++i) {
        randomFrame[i] = static_cast<unsigned char>(dis(gen));
    }
    randomFrame.insert(randomFrame.begin(), { 0x7E, 0x00, static_cast<uint8_t>(length) });
    return randomFrame;
}

void afficherTrameEchappee(std::vector<uint8_t>& escapedFrame) {

    std::stringstream ss;
    for (uint8_t byte : escapedFrame) {
        ss << std::hex << static_cast<int>(byte);
        ss << "  ";
    }
    std::string trameEchappee = ss.str();
    std::cout << "\033[90m" << "Trame Echappee     : " << "\033[0m" << trameEchappee
        << "\033[90m" << std::endl << "Caractere echappee : " << "\033[0m";
    for (size_t i = 0; i < trameEchappee.size(); ++i) {
        if (i + 1 < trameEchappee.size() && trameEchappee[i] == '7' && trameEchappee[i + 1] == 'd') {
            std::cout << "\033[31m";
            std::cout << trameEchappee.substr(i, 6);
            std::cout << "\033[0m";
            i += 5;
        }
        else {
            std::cout << trameEchappee[i];
        }
    }
}

void afficherCalcules(std::vector<std::string> analyseDeLaTrame, std::vector<std::string> calcules) {
    std::cout << std::endl << std::endl
        << std::endl << std::endl << "\033[30;100mCalcules effectuer sur la trame :\033[0m" << std::endl;

    for (size_t i = 0; i < analyseDeLaTrame.size(); i++) {
        std::cout << analyseDeLaTrame.at(i);
        std::cout << calcules.at(i);
    }
}

int main() {
    int choose = 0;
    bool aleatoire = false; // Choissisez ici si vous souhaitez travailler sur une trame genere aleatoirement ou sur une trame exemple qui certifie des exemples claire
    size_t frameLength = 25;
    std::vector<unsigned char> frameAleatoire = { 0x7E };
    std::vector<uint8_t> frameDefini = { 0x7E, 0x00, 0x03, 0x7D, 0xFA, 0x11 };
    std::vector<uint8_t> escapedFrame;
    std::vector<std::string> analyseDeLaTrame;
    std::vector<std::string> calcules;
    do {
        system("cls");
        std::cout << "\t\t\033[31;100mMENU\033[0m \n\n[1] : Trame Al\202atoire\n[2] : Trame exemple concret\n[3] : Travailler sur une trame specifique\n[4] : Tutoriel\n";
        std::cin >> choose;
        system("cls");
        if (choose == 1 || choose == 2) {
            if (choose == 1) {
                aleatoire = true;
                std::cout << "Choisissez la taille de la trame (25 par defaut)";
                std::cin >> frameLength;
                system("cls");
            }
            else if (choose == 2) {
                aleatoire = false;
                system("cls");
                explication();
            }
            frameAleatoire = generateRandomFrame(frameLength);
            std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t\t\t TRAME XBee ECHAPPEE " << "\033[0m" << std::endl << std::endl;
            std::cout << "\033[90m" << "Trame d'origine    : " << "\033[0m";
            if (aleatoire) {
                for (uint8_t byte : frameAleatoire) {
                    std::cout << std::hex << static_cast<int>(byte) << " ";
                }std::cout << std::endl;
                escapedFrame = escapeFrame(frameAleatoire, analyseDeLaTrame, calcules);
            }
            else {
                for (uint8_t byte : frameDefini) {
                    std::cout << std::hex << static_cast<int>(byte) << " ";
                }std::cout << std::endl;
                escapedFrame = escapeFrame(frameDefini, analyseDeLaTrame, calcules);
            }

            afficherTrameEchappee(escapedFrame);
            afficherCalcules(analyseDeLaTrame, calcules);

            analyseDeLaTrame.clear();
            calcules.clear();

            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }
        else if (choose == 3) {
            std::cout << "Specifiez : \n[1] : Calculer le cheksum\n[2] : Echapper la trame\n";
            std::cin >> choose;
            if (choose == 1) {
                std::vector<uint8_t> frame;
                size_t dataSize;
                system("cls");
                std::cout << "Entrez la taille des donnees : ";
                std::cin >> dataSize;
                dataSize += 1;
                int donne = 0;
                uint8_t buffer;
                std::string bufferS;
                system("cls");
                std::cout << "Entrez les octets de donnees (en hexadecimal) Exemple commencez avec 7d : ";
                std::cout << std::endl;
                bool fisrtTime = true;
                std::vector<std::string> DataStok;
                for (size_t i = 0; i < dataSize; ++i) {
                    if (!fisrtTime) std::cout << "\nbyte[" << i - 1 << "] : ";
                    fisrtTime = false;
                    std::getline(std::cin, bufferS);
                    DataStok.push_back(bufferS);
                    char* endPtr;
                    errno = 0;
                    unsigned long value = std::strtoul(bufferS.c_str(), &endPtr, 16);
                    if ((errno == ERANGE && (value == ULONG_MAX)) || (errno != 0 && value == 0)) {
                        std::cerr << "Erreur : stoul argument out of range" << std::endl;
                        continue;
                    }
                    buffer = static_cast<uint8_t>(value);
                    donne += buffer;
                }std::cout << std::endl; std::cout << std::endl;
                frame.insert(frame.begin(), { 0x7E, 0x00, static_cast<uint8_t>(dataSize - 1) });
                uint8_t checksum = calculateChecksum(frame, donne);
                for (uint8_t byte : frame) {
                    std::cout << "0x" << std::hex << static_cast<int>(byte) << " ";
                }

                for (size_t i = 0; i < DataStok.size() - 1; i++)
                {
                    std::cout << "0x" << DataStok.at(i + 1) << " ";

                }std::cout << std::endl; std::cout << std::endl;
                std::cout << "Cheksum = \033[33m0xFF\033[0m - [( \033[31m";
                short c = 0;
                for (size_t i = 0; i < DataStok.size() - 1; i++)
                {
                    c++;
                    if(c < dataSize - 1)
                    std::cout << "0x" << DataStok.at(i + 1) << " + ";
                    else if (c >= dataSize - 1)
                        std::cout <<"0x" << DataStok.at(i + 1) << " ";
                }
                std::cout << "\033[0m)] % 256 = \033[36m0x" << std::hex << static_cast<int>(checksum) << " \033[30m" << std::endl;

                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "coucou";
            }
            else {
                std::vector<uint8_t> frame;

                // Demander a l'utilisateur la taille des donnees
                size_t dataSize;
                std::cout << "Entrez la taille des donnees : ";
                std::cin >> dataSize;
                system("cls");
                // Demander a l'utilisateur d'entrer les octets de donnees
                std::cout << "Entrez les octets de donnees (en hexadecimal) : ";
                for (size_t i = 0; i < dataSize; ++i) {
                    uint16_t dataByte;
                    std::cin >> std::hex >> dataByte;
                    frame.push_back(static_cast<uint8_t>(dataByte));
                }

                // Ajouter le delimiteur de debut et les octets de longueur a la trame
                frame.insert(frame.begin(), { 0x7E, 0x00, static_cast<uint8_t>(dataSize) });
                system("cls");
                // Afficher la trame
                std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t\t\t TRAME XBee ECHAPPEE " << "\033[0m" << std::endl;
                std::cout << "Trame XBee : ";
                for (const auto& byte : frame) {
                    std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(byte) << " ";
                }
                std::cout << std::endl;
                escapedFrame = escapeFrame(frame, analyseDeLaTrame, calcules);

                afficherTrameEchappee(escapedFrame);
                afficherCalcules(analyseDeLaTrame, calcules);

                analyseDeLaTrame.clear();
                calcules.clear();

                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            }
            
        }
        else if (choose == 4) {
            tuto();
        }
        

    } while (true);
   
    return 0;
}

void explication() {

    std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t\t\t ANALYSE DE TRAME XBee " << "\033[0m" << std::endl;

    std::cout << "\033[30;100mRappel :\033[0m" << std::endl << "Les caracteres suivant serons echappe : \033[32m(0x7E, 0x7D, 0x11, 0x13)\033[0m." << std::endl << std::endl;
    std::cout << "\033[30;100mAttention :\033[0m " << std::endl << "Le caractere\033[33m (0x7E)\033[0m fait partie des caracteres a echapper, toutefois," << std::endl << "il represente aussi le caractere de \033[31mSTART\033[0m, alors il ne doit etre" 
        << std::endl << "echappe que s'il ne represente pas le start dans la trame." << std::endl << std::endl;

    std::cout << "\033[30;100mEchapper un caractere fonctionne de la maniere suivante :\033[0m" << std::endl;
    std::cout << "Admettons que nous tombions sur le caractere a echapper \033[32m(0x11)\033[0m." << std::endl;
    std::cout << "Alors les etapes a suivre serons les suivantes, " << std::endl << "Ajouter 0x7D (pour signaler un caractere echapper)" << std::endl;
    std::cout << "Et enfin faire le XOR de l'element \033[32m(0x11)\033[0m avec \033[33m0x20\033[0m ce qui donnera :" << std::endl << std::endl << std::endl;
    std::cout << "\t   0001 0001    \033[32m(0x11)\033[0m" << std::endl;
    std::cout << "\t^  0010 0000    \033[33m(0x20)\033[0m" << std::endl;
    std::cout << "\t------------------------" << std::endl;
    std::cout << "\t   0011 0001    \033[35m(0x31)\033[0m" << std::endl << std::endl;
    std::cout << "Et donc \033[32m(0x11)\033[0m se transformera en 0x7D \033[35m0x31\033[0m" << std::endl << std::endl;

}

void tuto() {
    std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t\t\t ANALYSE DE TRAME XBee " << "\033[0m" << std::endl;

    std::cout << "\033[30;100mRappel :\033[0m" << std::endl << "Les caractere suivant serons echappe : \033[32m(0x7E, 0x7D, 0x11, 0x13)\033[0m." << std::endl << std::endl;
    std::cout << "\033[30;100mAttention :\033[0m " << std::endl << "Le caractere\033[33m (0x7E)\033[0m fait partie des caracteres a echapper, toutefois," << std::endl << "il represente aussi le caractere de \033[31mSTART\033[0m, alors il ne doit etre"
        << std::endl << "echappe que s'il ne represente pas le start dans la trame." << std::endl << std::endl;

    std::cout << "\033[30;100mEchapper un caractere fonctionne de la maniere suivante :\033[0m" << std::endl;
    std::cout << "Admettons que nous tombions sur le caractere a echapper \033[32m(0x11)\033[0m." << std::endl;
    std::cout << "Alors les etapes a suivre serons les suivantes, " << std::endl << "Ajouter 0x7D (pour signaler un caractere echapper)" << std::endl;
    std::cout << "Et enfin faire le XOR de l'element \033[32m(0x11)\033[0m avec \033[33m0x20\033[0m ce qui donnera :" << std::endl << std::endl << std::endl;
    std::cout << "\t   0001 0001    \033[32m(0x11)\033[0m" << std::endl;
    std::cout << "\t^  0010 0000    \033[33m(0x20)\033[0m" << std::endl;
    std::cout << "\t------------------------" << std::endl;
    std::cout << "\t   0011 0001    \033[35m(0x31)\033[0m" << std::endl << std::endl;
    std::cout << "Et donc \033[32m(0x11)\033[0m se transformera en 0x7D \033[35m0x31\033[0m" << std::endl << std::endl << std::endl;

    std::cout << "\t\t\t\t\t\t    \033[31;100m TRAME " << "\033[0m" << std::endl;
    std::cout  << std::endl;

    std::cout << "\t| Start Delimiter | Frame Length (MSB) | Frame Length (LSB) | Frame Type | Frame Data | Frame Checksum |" << std::endl;
    std::cout << "\t|      0x7E       |       MSB          |       LSB          |     ...    |    ...     |      ...       |" << std::endl;

    std::cout << std::endl << std::endl;
    std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t CALCULER ET VERIFIER LE CHECKSUM " << "\033[0m" << std::endl << std::endl;

    std::cout << "\033[30;100mPour calculer le checksum d'une trame XBee :\033[0m" << std::endl;
    std::cout << "1. Additionnez tous les octets du paquet, sauf le delimiteur de debut 0x7E et la longueur (les deuxieme et troisieme octets)." << std::endl << std::endl;
    std::cout << "2. Conservez uniquement les 8 bits les plus faibles du resultat." << std::endl << std::endl;
    std::cout << "3. Soustrayez cette quantite de \033[33m0xFF\033[0m." << std::endl << std::endl;
    std::cout << "Pour verifier le checksum d'une trame XBee :" << std::endl << std::endl;
    std::cout << "1. Additionnez tous les octets, y compris le checksum; n'incluez pas le delimiteur et la longueur." << std::endl << std::endl;
    std::cout << "2. Si le checksum est correct, les deux derniers chiffres tout a droite de la somme sont egaux a \033[33m0xFF\033[0m." << std::endl << std::endl;
    std::cout << "\t\t\t\tCheksum = \033[33m0xFF\033[0m - [ (\033[31mSomme des data\033[0m) % \033[33m256\033[0m]" << std::endl << std::endl;
    std::cout << "\033[30;100mExemple : \033[0m" << std::endl << std::endl;
    std::cout << "Admettons que nous ayons la trame suivante : " << std::endl << std::endl;
    std::cout << "\t\033[90m_______________________________________________________________________________________________________" << std::endl;
    std::cout << "\t| Start Delimiter | Frame Length (MSB) | Frame Length (LSB) |        Frame Data       | Frame Checksum |" << std::endl;
    std::cout << "\t--------------------------------------------------------------------------------------------------------" << std::endl;
    std::cout << "\t|      0x7E       |       0x00          |       0x03        |    \033[31m 0x7d  0xfa  x011\033[90m    |        ?       |" << std::endl;
    std::cout << "\t--------------------------------------------------------------------------------------------------------\033[0m" << std::endl;
    std::cout << std::endl << std::endl;
    std::cout << "\t\t\t    Cheksum = \033[33m0xFF\033[0m - [ (\033[31m 0x7d + 0xfa + x011\033[90m) % \033[33m256\033[0m] = \033[36m0x77\033[0m" << std::endl << std::endl;
    std::cout << "\t\t\t    \033[90mAddition des valeurs a l'interieur des parentheses :\033[0m" << std::endl << std::endl;
    std::cout << "\t\t\t    \033[31m(0x7d + 0xfa + 0x11) = (125 + 250 + 17)\033[0m = 392" << std::endl << std::endl;
    std::cout << "\t\t\t    \033[90mCalcul du reste de la division par \033[0m256 : 392 % 256 = 136\033[0m" << std::endl << std::endl;
    std::cout << "\t\t\t    \033[90mSoustraction du reste obtenu de \033[33m0xFF\033[0m : 0xff - 136 = 255 - 136 = 119\033[0m" << std::endl << std::endl;
    std::cout << "\t\t\t    \033[90mDonc, le resultat de l'expression \033[33m0xFF\033[0m - [ (\033[31m 0x7d + 0xfa + x011\033[90m) % \033[33m256\033[0m] est \033[36m119\033[0m" << std::endl << std::endl;
    std::cout << "\t\t\t    \033[90mSoit \033[0m119 = 0x77\033[0m donc :" << std::endl << std::endl;
    std::cout << "\t\t\t    Cheksum = \033[33m0xFF\033[0m - [ (\033[31m 0x7d + 0xfa + x011 \033[90m) % \033[33m256\033[0m] = \033[36m0x77\033[0m" << std::endl << std::endl;

    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}





























//#pragma once
//#include <iostream>
//#include <vector>
//#include <random>
//#include <sstream>
//#include <string>
//#include <bitset>
//void explication();
//void calcule(uint8_t value, std::vector<std::string>& calculesTrame);
//std::vector<uint8_t> escapeFrame(const std::vector<uint8_t>& frame, std::vector<std::string>& trameAnalyse, std::vector<std::string>& calculesTrame);
//std::vector<unsigned char> generateRandomFrame(size_t length);
//
//std::vector<uint8_t> escapeFrame(const std::vector<uint8_t>& frame, std::vector<std::string>& trameAnalyse, std::vector<std::string>& calculesTrame) {
//    std::vector<uint8_t> escapedFrame;
//    bool First = true;
//    for (uint8_t byte : frame) {
//        if (!First) {
//            if (byte == 0x7E || byte == 0x7D || byte == 0x11 || byte == 0x13) {
//                escapedFrame.push_back(0x7D);
//                escapedFrame.push_back(byte ^ 0x20);
//                std::stringstream ss;
//                ss << "\n\033[31m" << "0x" << std::hex << static_cast<int>(byte) << "\033[0m" << " ^ 0x20" << " = " << "\033[32m" << (byte ^ 0x20) << "\033[90m : (0x" << static_cast<int>(byte) << ") remplace par : 0x7d 0x" << (byte ^ 0x20) << "\033[0m";
//                trameAnalyse.push_back(ss.str());
//                calcule(byte, calculesTrame);
//            }
//            else {
//                escapedFrame.push_back(byte);
//            }
//        }
//        if (First) escapedFrame.push_back(0x7E);
//        First = false;
//    }
//
//    return escapedFrame;
//}
//
//void calcule(uint8_t value, std::vector<std::string>& calculesTrame) {
//    std::bitset<8> byte(value);
//    std::bitset<8> twenty(0x20);
//    std::bitset<8> result(value ^ 0x20);
//
//    std::string resultString = "\n\n\t\t " + byte.to_string() + "\n";
//    resultString += "\t\t " + twenty.to_string() + "\n";
//    resultString += "\t\t^--------\n";
//    resultString += "\t\t " + result.to_string() + "\n\n\n";
//
//    calculesTrame.push_back(resultString);
//
//}
//
//
//std::vector<unsigned char> generateRandomFrame(size_t length) {
//    std::random_device rd;
//    std::mt19937 gen(rd());
//    std::uniform_int_distribution<unsigned int> dis(0x00, 0xFF);
//
//    std::vector<unsigned char> randomFrame(length);
//    for (size_t i = 0; i < length; ++i) {
//        randomFrame[i] = static_cast<unsigned char>(dis(gen));
//    }
//    randomFrame.insert(randomFrame.begin(), 0x7E);
//    return randomFrame;
//}
//
//int main() {
//    int choose = 0;
//    bool aleatoire = true; // Choissisez ici si vous souhaitez travailler sur une trame généré aléatoirement ou sur une trame exemple qui certifie des exemples claire
//    size_t frameLength = 25;
//    std::cout << "MENU : \n[1] : Trame Al\202atoire\n[2] : Trame exemple concret\n";
//    std::cin >> choose;
//    system("cls");
//    if (choose == 1) {
//        aleatoire = true;
//        std::cout << "Choisissez la taille de la trame (25 par defaut)";
//        std::cin >> frameLength;
//    }
//    else aleatoire = false;
//    system("cls");
//    std::vector<unsigned char> frameAleatoire = { 0x7E };
//    frameAleatoire = generateRandomFrame(frameLength);
//    std::vector<uint8_t> frameDefini = { 0x7E, 0x00, 0x03, 0x7D, 0xFA, 0x11 };
//    explication();
//    std::vector<uint8_t> escapedFrame;
//    std::vector<std::string> analyseDeLaTrame;
//    std::vector<std::string> calcules;
//    std::cout << "\033[90m" << "Trame d'origine    : " << "\033[0m";
//    if (aleatoire) {
//        for (uint8_t byte : frameAleatoire) {
//            std::cout << std::hex << static_cast<int>(byte) << " ";
//        }std::cout << std::endl;
//        escapedFrame = escapeFrame(frameAleatoire, analyseDeLaTrame, calcules);
//    }
//    else {
//        for (uint8_t byte : frameDefini) {
//            std::cout << std::hex << static_cast<int>(byte) << " ";
//        }std::cout << std::endl;
//        escapedFrame = escapeFrame(frameDefini, analyseDeLaTrame, calcules);
//    }
//
//    std::stringstream ss;
//    for (uint8_t byte : escapedFrame) {
//        ss << std::hex << static_cast<int>(byte);
//        ss << "  ";
//    }
//    std::string trameEchappee = ss.str();
//    std::cout << "\033[90m" << "Trame Echappee     : " << "\033[0m" << trameEchappee
//        << "\033[90m" << std::endl << "Caractere echappee : " << "\033[0m";
//    for (size_t i = 0; i < trameEchappee.size(); ++i) {
//        if (i + 1 < trameEchappee.size() && trameEchappee[i] == '7' && trameEchappee[i + 1] == 'd') {
//            std::cout << "\033[31m";
//            std::cout << trameEchappee.substr(i, 6);
//            std::cout << "\033[0m";
//            i += 5;
//        }
//        else {
//            std::cout << trameEchappee[i];
//        }
//    }
//
//    std::cout << std::endl << std::endl
//        << std::endl << std::endl << "\033[30;100mCalcules effectuer sur la trame :\033[0m" << std::endl;
//
//    for (size_t i = 0; i < analyseDeLaTrame.size(); i++) {
//        std::cout << analyseDeLaTrame.at(i);
//        std::cout << calcules.at(i);
//    }
//
//    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
//    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
//    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
//    return 0;
//}
//
//void explication() {
//
//    std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t\t\t ANALYSE DE TRAME XBee " << "\033[0m" << std::endl;
//
//    std::cout << "\033[30;100mRappel :\033[0m" << std::endl << "Les caractere suivant serons echappe : \033[32m(0x7E, 0x7D, 0x11, 0x13)\033[0m." << std::endl << std::endl;
//    std::cout << "\033[30;100mAttention :\033[0m " << std::endl << "Le caractere\033[33m (0x7E)\033[0m fait partie des caracteres a echapper, toutefois," << std::endl << "il represente aussi le caractere de \033[31mSTART\033[0m, alors il ne doit etre"
//        << std::endl << "echappe que s'il ne represente pas le start dans la trame." << std::endl << std::endl;
//
//    std::cout << "\033[30;100mEchapper un caractere fonctionne de la maniere suivante :\033[0m" << std::endl;
//    std::cout << "Admettons que nous tombions sur le caractere a echapper \033[32m(0x11)\033[0m." << std::endl;
//    std::cout << "Alors les etapes a suivre serons les suivantes, " << std::endl << "Ajouter 0x7D (pour signaler un caractere echapper)" << std::endl;
//    std::cout << "Et enfin faire le XOR de l'element \033[32m(0x11)\033[0m avec \033[33m0x20\033[0m ce qui donnera :" << std::endl << std::endl << std::endl;
//    std::cout << "\t   0001 0001    \033[32m(0x11)\033[0m" << std::endl;
//    std::cout << "\t^  0010 0000    \033[33m(0x20)\033[0m" << std::endl;
//    std::cout << "\t------------------------" << std::endl;
//    std::cout << "\t   0011 0001    \033[35m(0x31)\033[0m" << std::endl << std::endl;
//    std::cout << "Et donc \033[32m(0x11)\033[0m se transformera en 0x7D \033[35m0x31\033[0m" << std::endl << std::endl << std::endl;
//
//    std::cout << "\033[31m" << "\033[100m" << "\t\t\t\t\t\t TRAVAIL SUR LA TRAME " << "\033[0m" << std::endl;
//
//}
